buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "http://repo.spring.io/milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
        classpath "io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE"

        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.6"
        classpath "org.springframework.build.gradle:propdeps-plugin:0.0.7"
        classpath "com.moowork.gradle:gradle-node-plugin:0.12"
        classpath "com.moowork.gradle:gradle-gulp-plugin:0.12"
        classpath "se.transmode.gradle:gradle-docker:1.2"
        classpath 'com.github.townsfolk:gradle-release:1.2'

        //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'spring-boot'
apply plugin: 'propdeps'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.ltgt.apt'
apply plugin: 'maven-publish'
apply plugin: 'release'
apply plugin: 'war'

war {
    baseName = 'ailiens-common'
    version = '0.0.1'
}

bootRepackage {
    mainClass = 'com.aliens.hipster.MsgApp'
}

gradle.taskGraph.whenReady { graph ->
    def badTasks = ['findMainClass', 'startScripts', 'distTar', 'distZip']
    graph.allTasks.findAll {it.name in badTasks}.each { task ->
        task.enabled = false
    }
}




/* downgrade Hibernate to 4.3 */
ext['hibernate.version'] = '${hibernate_entitymanager_version}'
defaultTasks 'bootRun'



springBoot {
    mainClass = 'com.aliens.hipster.MsgApp'
    executable = true
}


bootRun {
    addResources = false
    systemProperties = System.properties
}

sourceCompatibility=1.8
targetCompatibility=1.8

test {
    include '**/*UnitTest*'
    include '**/*IntTest*'

    ignoreFailures true
    reports.html.enabled = false
}







apply from: 'gradle/yeoman.gradle'


apply from: 'gradle/liquibase.gradle'

apply from: 'gradle/gatling.gradle'
apply from: 'gradle/mapstruct.gradle'
apply from: 'gradle/docker.gradle'
apply from: 'gradle/coverage.gradle'
//jhipster-needle-gradle-apply-from - JHipster will add additional gradle scripts to be applied here

if (project.hasProperty('prod')) {
    apply from: 'gradle/profile_prod.gradle'
} else {
    apply from: 'gradle/profile_dev.gradle'
}

group = 'com.aliens.hipster'
version = '0.0.1-SNAPSHOT'

description = ''

configurations {
    providedRuntime
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'http://repo.spring.io/milestone' }
    maven { url 'http://repo.spring.io/snapshot' }
    maven { url 'https://repository.jboss.org/nexus/content/repositories/releases' }
    maven { url 'https://oss.sonatype.org/content/repositories/releases' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'http://repo.maven.apache.org/maven2' }
}


subprojects
    {

        apply plugin: 'java'
        apply plugin: 'maven'
        apply plugin: 'spring-boot'
        apply plugin: 'propdeps'
        apply plugin: 'io.spring.dependency-management'
        apply plugin: 'net.ltgt.apt'
        apply plugin: 'maven-publish'

        dependencyManagement {
            imports {
                mavenBom 'org.springframework.boot:spring-boot-starter-parent:1.2.4.RELEASE'
            }
        }

        gradle.taskGraph.whenReady { graph ->
            def badTasks = ['bootRepackage']
            graph.allTasks.findAll {it.name in badTasks}.each { task ->
                task.enabled = false
            }
        }

        buildscript {
            repositories {
                mavenLocal()
                mavenCentral()
                jcenter()
                maven { url "http://repo.spring.io/plugins-release" }
                maven { url "http://repo.spring.io/milestone" }
                maven { url "https://plugins.gradle.org/m2/" }
            }
            dependencies {
                classpath "org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}"
                classpath "io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE"

                classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.0.1"
                classpath "net.ltgt.gradle:gradle-apt-plugin:0.6"
                classpath "org.springframework.build.gradle:propdeps-plugin:0.0.7"
                classpath "com.moowork.gradle:gradle-node-plugin:0.12"
                classpath "com.moowork.gradle:gradle-gulp-plugin:0.12"
                classpath "se.transmode.gradle:gradle-docker:1.2"
                classpath 'com.github.townsfolk:gradle-release:1.2'

                //jhipster-needle-gradle-buildscript-dependency - JHipster will add additional gradle build script plugins here
            }
        }

        repositories {
            mavenLocal()
            mavenCentral()
            jcenter()
            maven { url 'http://repo.spring.io/milestone' }
            maven { url 'http://repo.spring.io/snapshot' }
            maven { url 'https://repository.jboss.org/nexus/content/repositories/releases' }
            maven { url 'https://oss.sonatype.org/content/repositories/releases' }
            maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
            maven { url 'http://repo.maven.apache.org/maven2' }
        }

        dependencies{
            provided 'org.projectlombok:lombok:1.16.10'
            apt 'org.projectlombok:lombok:1.16.10'

            compile "org.springframework.boot:spring-boot-actuator"
            compile "org.springframework.boot:spring-boot-autoconfigure"
            compile "org.springframework.boot:spring-boot-loader-tools"
            compile "org.springframework.boot:spring-boot-starter-logging"
            compile "org.springframework.boot:spring-boot-starter-aop"
            compile "org.springframework.boot:spring-boot-starter-data-jpa"
            compile "org.springframework.boot:spring-boot-starter-security"
            compile "org.springframework.boot:spring-boot-starter-web"
            compile "org.springframework.boot:spring-boot-starter-thymeleaf"

            configurations {
                all*.exclude group: 'javassist'
            }

            apply from: '../gradle/release.gradle'

            compile 'com.google.code.gson:gson:2.8.0'
            compile 'com.google.guava:guava:18.0'

            compile "javax.inject:javax.inject:${javax_inject_version}"

        }
    }



configure (subprojects
    - project(':graphite-reporter')
    - project(':graphite-reporter-extensions')
    -project(':msg-publisher')
    -project(':msg-common')
    -project(':msg-receiver')
    -project(':ando-models')
    -project(':custom-logging')
    -project(':common')

    -project(':galactus-models')
    -project(':msg-adapter-spring-jpa')
    -project(':security-adapter')
    -project(':msg-adapter-cassandra')
    -project(':galactus-models')
    -project(':optimusprime-models')
    -project(':swagger')

){


    dependencies {
        compile localGroovy()
        compile "io.dropwizard.metrics:metrics-core"
        compile "io.dropwizard.metrics:metrics-annotation:${dropwizard_metrics_version}"
        compile "io.dropwizard.metrics:metrics-ehcache:${dropwizard_metrics_version}"
        compile "io.dropwizard.metrics:metrics-graphite:${dropwizard_metrics_version}"
        compile "io.dropwizard.metrics:metrics-healthchecks:${dropwizard_metrics_version}"
        compile "io.dropwizard.metrics:metrics-jvm:${dropwizard_metrics_version}"
        compile "io.dropwizard.metrics:metrics-servlet:${dropwizard_metrics_version}"
        compile "io.dropwizard.metrics:metrics-json:${dropwizard_metrics_version}"
        compile("io.dropwizard.metrics:metrics-servlets:${dropwizard_metrics_version}") {
            exclude(module: 'metrics-healthchecks')
        }
        compile("net.logstash.logback:logstash-logback-encoder:${logstash_logback_encoder_version}") {
            exclude(module: 'ch.qos.logback')
        }
        compile "com.fasterxml.jackson.datatype:jackson-datatype-json-org:${jackson_version}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-hppc:${jackson_version}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jackson_version}"
        compile "com.fasterxml.jackson.datatype:jackson-datatype-hibernate4"
        compile "com.fasterxml.jackson.core:jackson-annotations:${jackson_version}"
        compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
        compile("com.ryantenney.metrics:metrics-spring:${metrics_spring_version}") {
            exclude(module: 'metrics-core')
            exclude(module: 'metrics-healthchecks')
        }
        compile "org.hibernate:hibernate-core:${hibernate_entitymanager_version}"
        compile("com.zaxxer:HikariCP:${HikariCP_version}") {
            exclude(module: 'tools')
        }
        compile "commons-lang:commons-lang:${commons_lang_version}"
        compile "commons-io:commons-io:${commons_io_version}"

        compile "javax.transaction:javax.transaction-api"
        compile "org.apache.geronimo.javamail:geronimo-javamail_1.4_mail:${geronimo_javamail_1_4_mail_version}"

        compile("org.hibernate:hibernate-ehcache") {
            exclude(module: 'ehcache-core')
        }
        compile "org.hibernate:hibernate-envers"
        compile "org.hibernate:hibernate-validator"
        compile("org.liquibase:liquibase-core:${liquibase_core_version}") {
            exclude(module: 'jetty-servlet')
        }
        compile "com.mattbertolini:liquibase-slf4j:${liquibase_slf4j_version}"
        compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector"
        compile "org.springframework.cloud:spring-cloud-spring-service-connector"
        compile "org.springframework.cloud:spring-cloud-localconfig-connector"
        compile("org.springframework:spring-context-support") {
            exclude(module: 'quartz')
        }
        compile "org.springframework.security:spring-security-config:${spring_security_version}"
        compile "org.springframework.security:spring-security-data:${spring_security_version}"
        compile "org.springframework.security:spring-security-web:${spring_security_version}"

        compile("io.springfox:springfox-swagger2:${springfox_version}") {
            exclude module: 'mapstruct'
        }

        compile "mysql:mysql-connector-java"
        compile "fr.ippon.spark.metrics:metrics-spark-reporter:${metrics_spark_reporter_version}"
        compile "org.mapstruct:mapstruct-jdk8:${mapstruct_version}"
        testCompile "com.jayway.awaitility:awaitility:${awaility_version}"
        testCompile "com.jayway.jsonpath:json-path"
        testCompile "org.springframework.boot:spring-boot-starter-test"
        testCompile "org.springframework.boot:spring-boot-test"
        testCompile "org.assertj:assertj-core:${assertj_core_version}"
        testCompile "junit:junit"
        testCompile "org.mockito:mockito-core"
        testCompile "com.mattbertolini:liquibase-slf4j:${liquibase_slf4j_version}"
        testCompile "org.hamcrest:hamcrest-library"

        testCompile "io.gatling.highcharts:gatling-charts-highcharts:${gatling_version}"

        testCompile "com.h2database:h2"
        optional "org.springframework.boot:spring-boot-configuration-processor:${spring_boot_version}"
        //jhipster-needle-gradle-dependency - JHipster will add additional dependencies here

        //commons


        compile 'com.mashape.unirest:unirest-java:1.4.9'
        compile 'org.springframework.retry:spring-retry:1.1.4.RELEASE'
        compile 'com.google.code.gson:gson:2.8.0'
        compile 'com.rabbitmq:amqp-client:3.6.5'

    }

}

dependencies
    {
        compile project(':main')
    }

project(':main')
    {
        dependencies
            {
                compile project(':msg-publisher')
                compile project(':msg-receiver')
                compile project(':msg-common')
                compile project(':restutil')
                compile project(':message-sender')
                compile project(':common')
                compile project(':rabbitmq-publisher')
            }
    }

project(':graphite-reporter')
    {
        dependencies {
            compile "io.dropwizard.metrics:metrics-core"
            compile "io.dropwizard.metrics:metrics-annotation:${dropwizard_metrics_version}"
            compile "io.dropwizard.metrics:metrics-ehcache:${dropwizard_metrics_version}"
            compile "io.dropwizard.metrics:metrics-graphite:${dropwizard_metrics_version}"
            compile "io.dropwizard.metrics:metrics-healthchecks:${dropwizard_metrics_version}"
            compile "io.dropwizard.metrics:metrics-jvm:${dropwizard_metrics_version}"
            compile "io.dropwizard.metrics:metrics-servlet:${dropwizard_metrics_version}"
            compile "io.dropwizard.metrics:metrics-json:${dropwizard_metrics_version}"
            compile("io.dropwizard.metrics:metrics-servlets:${dropwizard_metrics_version}") {
                exclude(module: 'metrics-healthchecks')
            }

            compile("com.ryantenney.metrics:metrics-spring:${metrics_spring_version}") {
                exclude(module: 'metrics-core')
                exclude(module: 'metrics-healthchecks')
            }
        }
    }


project(':graphite-reporter-extensions')
    {
        dependencies {
            compile "io.dropwizard.metrics:metrics-core"
            compile "io.dropwizard.metrics:metrics-annotation:${dropwizard_metrics_version}"
            compile "io.dropwizard.metrics:metrics-ehcache:${dropwizard_metrics_version}"
            compile "io.dropwizard.metrics:metrics-graphite:${dropwizard_metrics_version}"
            compile "io.dropwizard.metrics:metrics-healthchecks:${dropwizard_metrics_version}"
            compile "io.dropwizard.metrics:metrics-jvm:${dropwizard_metrics_version}"
            compile "io.dropwizard.metrics:metrics-servlet:${dropwizard_metrics_version}"
            compile "io.dropwizard.metrics:metrics-json:${dropwizard_metrics_version}"
            compile("io.dropwizard.metrics:metrics-servlets:${dropwizard_metrics_version}") {
                exclude(module: 'metrics-healthchecks')
            }

            compile("com.ryantenney.metrics:metrics-spring:${metrics_spring_version}") {
                exclude(module: 'metrics-core')
                exclude(module: 'metrics-healthchecks')
            }

            compile("io.dropwizard.metrics:metrics-servlets:3.1.2")
        }
    }


project(':msg-receiver')
    {
        dependencies
            {
                compile project(':msg-common')
                compile project(':msg-adapter-spring-jpa')
                compile 'org.apache.commons:commons-lang3:3.3.2'
                compile "io.dropwizard.metrics:metrics-core"
                compile "io.dropwizard.metrics:metrics-annotation:${dropwizard_metrics_version}"
                compile "io.dropwizard.metrics:metrics-ehcache:${dropwizard_metrics_version}"
                compile "io.dropwizard.metrics:metrics-graphite:${dropwizard_metrics_version}"
            }
    }

project('msg-common')
    {
        dependencies
            {
                compile group: 'joda-time', name: 'joda-time', version: '2.9.4'
            }
    }

project(':restutil')
    {
        dependencies
            {
                compile project(':common')
            }
    }

project(':msg-adapter-spring-jpa')
    {
        dependencies {
            compile project(':msg-common')
        }
    }

project(':msg-adapter-cassandra')
    {
        dependencies {
            compile project(':msg-common')
            compile('org.springframework.boot:spring-boot-starter-data-cassandra')
            compile group: 'com.datastax.cassandra', name: 'cassandra-driver-mapping', version: '2.1.0-rc1'
        }
    }


project(':msg-publisher')
    {
        dependencies
            {
                compile project(':msg-common')
                compile project(':msg-adapter-spring-jpa')

                compile 'com.rabbitmq:amqp-client:3.6.5'
                compile 'org.apache.commons:commons-lang3:3.3.2'

                compile "io.dropwizard.metrics:metrics-core"
                compile "io.dropwizard.metrics:metrics-annotation:${dropwizard_metrics_version}"
                compile "io.dropwizard.metrics:metrics-ehcache:${dropwizard_metrics_version}"
                compile "io.dropwizard.metrics:metrics-graphite:${dropwizard_metrics_version}"
            }


    }


project(':ando-models')
    {
        dependencies {
            compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-elasticsearch'
            compile group: 'org.hibernate', name: 'hibernate-envers'
          }
    }

project(':custom-logging')
    {
        dependencies
            {
                compile group: 'joda-time', name: 'joda-time', version: '2.9.4'

            }
    }


project(':galactus-models')
    {
        dependencies {

        }
    }
project(':optimusprime-models')
    {
        dependencies {
            compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
            compile 'org.json:json:20090211'
            compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.2'
            compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.6.3'
            compile group: 'org.hibernate', name: 'hibernate-envers'
        }
    }
project(':security-adapter')
    {
        dependencies {
            compile("org.keycloak:keycloak-spring-security-adapter:2.4.0.Final")
            compile("org.keycloak:keycloak-authz-client:2.4.0.Final")
        }
    }

project(':swagger')
    {
        dependencies {
            compile("io.springfox:springfox-swagger2:2.6.1"){
                exclude module: 'mapstruct'
            }

            compile("io.springfox:springfox-swagger-ui:2.6.1"){
                exclude module: 'mapstruct'
            }
        }
    }




clean {
    delete "target"
}

task cleanResources(type: Delete) {
    delete 'build/resources'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
}

task stage(dependsOn: 'bootRepackage') {
}

compileJava.dependsOn processResources
processResources.dependsOn cleanResources
